"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

import structlog

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
# DATABASES = {
#     "default": {
#         "ENGINE": "xxxxxxxxxxxxxxxxxxxxxxxxxxxx",
#         "NAME": "xxxxxxx",
#         "USER": "xxxxxxx",
#         "PASSWORD": "xxxxxxxxxxxxxxxxxxxxxxxxxx",
#         "HOST": "xxxxxxxxxx.example.com",
#         "PORT": "9999",
#     }
# }
from .databases import DATABASES

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
from .secret_key import SECRET_KEY

_ = SECRET_KEY
_ = DATABASES

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "app",
    "rest_framework",
    "background_task",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "app.lib.middleware.ApiMiddleware",
]

ROOT_URLCONF = "project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "project.wsgi.application"


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "ja"

TIME_ZONE = "Asia/Tokyo"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = "/static/"

APPEND_SLASH = False

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "\t".join(
                ["[{levelname}]", "{asctime}", "{process:d}", "{message}"]
            ),
            "style": "{",
        },
        "json": {
            "()": structlog.stdlib.ProcessorFormatter,
            "processor": structlog.processors.JSONRenderer(),
        },
    },
    "handlers": {
        "console": {"level": "DEBUG", "class": "logging.StreamHandler"},
        "application_debug_log": {
            "level": "DEBUG",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": "/code/project/logs/application_debug.log",
            "formatter": "json",
            "when": "D",
            "interval": 1,
        },
        "application_log": {
            "level": "DEBUG",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": "/code/project/logs/application.log",
            "formatter": "json",
            "when": "D",
            "interval": 1,
        },
        "conflict_site_loader_batch": {
            "level": "DEBUG",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": "/code/project/logs/conflict_site_loader_batch.log",
            "formatter": "json",
            "when": "D",
            "interval": 1,
        },
        "keyword_data_loader_batch": {
            "level": "DEBUG",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": "/code/project/logs/keyword_data_loader_batch.log",
            "formatter": "json",
            "when": "D",
            "interval": 1,
        },
        "substance_review_batch": {
            "level": "DEBUG",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": "/code/project/logs/substance_review_batch.log",
            "formatter": "json",
            "when": "D",
            "interval": 1,
        },
        "article_review_batch": {
            "level": "DEBUG",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": "/code/project/logs/article_review_batch.log",
            "formatter": "json",
            "when": "D",
            "interval": 1,
        },
    },
    "loggers": {
        "application_debug_log": {
            "level": "DEBUG",
            "handlers": ["console", "application_debug_log"],
        },
        "application_log": {
            "level": "DEBUG",
            "handlers": ["console", "application_log"],
        },
        "conflict_site_loader_batch": {
            "level": "DEBUG",
            "handlers": ["console", "conflict_site_loader_batch"],
        },
        "keyword_data_loader_batch": {
            "level": "DEBUG",
            "handlers": ["console", "keyword_data_loader_batch"],
        },
        "substance_review_batch": {
            "level": "DEBUG",
            "handlers": ["console", "substance_review_batch"],
        },
        "article_review_batch": {
            "level": "DEBUG",
            "handlers": ["console", "article_review_batch"],
        },
    },
}

structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.processors.ExceptionPrettyPrinter(),
        structlog.stdlib.ProcessorFormatter.wrap_for_formatter,
    ],
    context_class=structlog.threadlocal.wrap_dict(dict),
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
    "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
}
